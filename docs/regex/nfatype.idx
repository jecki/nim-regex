nonCapture	regex/nfatype.html#nonCapture	nfatype: nonCapture	
CaptState	regex/nfatype.html#CaptState	nfatype: CaptState	
CaptIdx	regex/nfatype.html#CaptIdx	nfatype: CaptIdx	
Capts3	regex/nfatype.html#Capts3	nfatype: Capts3	
`[]`	regex/nfatype.html#[],Capts3,Natural,Natural	nfatype: `[]`(capts: Capts3; i, j: Natural): Slice[int]	
`[]`	regex/nfatype.html#[],Capts3,Natural,Natural_2	nfatype: `[]`(capts: var Capts3; i, j: Natural): var Slice[int]	
initCapts3	regex/nfatype.html#initCapts3,int	nfatype: initCapts3(groupsLen: int): Capts3	
keepAlive	regex/nfatype.html#keepAlive,Capts3,CaptIdx	nfatype: keepAlive(capts: var Capts3; captIdx: CaptIdx)	
freeze	regex/nfatype.html#freeze,Capts3	nfatype: freeze(capts: var Capts3): CaptState	
unfreeze	regex/nfatype.html#unfreeze,Capts3,CaptState	nfatype: unfreeze(capts: var Capts3; freezeId: CaptState)	
diverge	regex/nfatype.html#diverge,Capts3,CaptIdx	nfatype: diverge(capts: var Capts3; captIdx: CaptIdx): CaptIdx	
recycle	regex/nfatype.html#recycle,Capts3	nfatype: recycle(capts: var Capts3)	
notRecyclable	regex/nfatype.html#notRecyclable,Capts3,CaptIdx	nfatype: notRecyclable(capts: var Capts3; captIdx: CaptIdx)	
recyclable	regex/nfatype.html#recyclable,Capts3,CaptIdx	nfatype: recyclable(capts: var Capts3; captIdx: CaptIdx)	
clear	regex/nfatype.html#clear,Capts3	nfatype: clear(capts: var Capts3)	
CaptNode	regex/nfatype.html#CaptNode	nfatype: CaptNode	
Capts	regex/nfatype.html#Capts	nfatype: Capts	
Captures	regex/nfatype.html#Captures	nfatype: Captures	
constructSubmatches	regex/nfatype.html#constructSubmatches,Captures,Capts,int,int	nfatype: constructSubmatches(captures: var Captures; capts: Capts; capt, size: int)	
reverse	regex/nfatype.html#reverse,Capts,int32,int32	nfatype: reverse(capts: var Capts; a, b: int32): int32	
RegexLit	regex/nfatype.html#RegexLit	nfatype: RegexLit	
Regex	regex/nfatype.html#Regex	nfatype: Regex	
mfShortestMatch	regex/nfatype.html#mfShortestMatch	MatchFlag.mfShortestMatch	
mfNoCaptures	regex/nfatype.html#mfNoCaptures	MatchFlag.mfNoCaptures	
mfFindMatch	regex/nfatype.html#mfFindMatch	MatchFlag.mfFindMatch	
mfFindMatchOpt	regex/nfatype.html#mfFindMatchOpt	MatchFlag.mfFindMatchOpt	
mfAnchored	regex/nfatype.html#mfAnchored	MatchFlag.mfAnchored	
mfBwMatch	regex/nfatype.html#mfBwMatch	MatchFlag.mfBwMatch	
mfReverseCapts	regex/nfatype.html#mfReverseCapts	MatchFlag.mfReverseCapts	
MatchFlag	regex/nfatype.html#MatchFlag	nfatype: MatchFlag	
MatchFlags	regex/nfatype.html#MatchFlags	nfatype: MatchFlags	
RegexMatch	regex/nfatype.html#RegexMatch	nfatype: RegexMatch	
RegexMatch2	regex/nfatype.html#RegexMatch2	nfatype: RegexMatch2	
Regex2	regex/nfatype.html#Regex2	nfatype: Regex2	
toRegex2	regex/nfatype.html#toRegex2.t	nfatype: toRegex2(r): untyped	
toRegex	regex/nfatype.html#toRegex.t	nfatype: toRegex(r): untyped	
clear	regex/nfatype.html#clear,RegexMatch	nfatype: clear(m: var RegexMatch)	
clear	regex/nfatype.html#clear,RegexMatch2	nfatype: clear(m: var RegexMatch2)	
NodeIdx	regex/nfatype.html#NodeIdx	nfatype: NodeIdx	
Bounds	regex/nfatype.html#Bounds	nfatype: Bounds	
PState	regex/nfatype.html#PState	nfatype: PState	
Submatches	regex/nfatype.html#Submatches	nfatype: Submatches	
newSubmatches	regex/nfatype.html#newSubmatches,int	nfatype: newSubmatches(size: int): Submatches	
`[]`	regex/nfatype.html#[],Submatches,int	nfatype: `[]`(sm: Submatches; i: int): PState	
hasState	regex/nfatype.html#hasState,Submatches,int16	nfatype: hasState(sm: Submatches; n: int16): bool	
add	regex/nfatype.html#add,Submatches,PState	nfatype: add(sm: var Submatches; item: PState)	
len	regex/nfatype.html#len,Submatches	nfatype: len(sm: Submatches): int	
clear	regex/nfatype.html#clear,Submatches	nfatype: clear(sm: var Submatches)	
items	regex/nfatype.html#items.i,Submatches	nfatype: items(sm: Submatches): PState	
cap	regex/nfatype.html#cap,Submatches	nfatype: cap(sm: Submatches): int	
setLen	regex/nfatype.html#setLen,Submatches,int	nfatype: setLen(sm: var Submatches; size: int)	
SmLookaroundItem	regex/nfatype.html#SmLookaroundItem	nfatype: SmLookaroundItem	
SmLookaround	regex/nfatype.html#SmLookaround	nfatype: SmLookaround	
setLen	regex/nfatype.html#setLen,SmLookaroundItem,int	nfatype: setLen(item: var SmLookaroundItem; size: int)	
last	regex/nfatype.html#last.t,SmLookaround	nfatype: last(sm: var SmLookaround): untyped	
lastA	regex/nfatype.html#lastA.t,SmLookaround	nfatype: lastA(sm: var SmLookaround): untyped	
lastB	regex/nfatype.html#lastB.t,SmLookaround	nfatype: lastB(sm: var SmLookaround): untyped	
grow	regex/nfatype.html#grow,SmLookaround	nfatype: grow(sm: var SmLookaround)	
removeLast	regex/nfatype.html#removeLast,SmLookaround	nfatype: removeLast(sm: var SmLookaround)	
