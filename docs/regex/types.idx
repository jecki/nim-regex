nimTitle	types	regex/types.html	module regex/types		0
nim	RpnExp	regex/types.html#RpnExp	object RpnExp		19
nim	Enfa	regex/types.html#Enfa	object Enfa		23
nim	Nfa	regex/types.html#Nfa	object Nfa		25
nim	flagCaseInsensitive	regex/types.html#flagCaseInsensitive	Flag.flagCaseInsensitive		29
nim	flagNotCaseInsensitive	regex/types.html#flagNotCaseInsensitive	Flag.flagNotCaseInsensitive		29
nim	flagMultiLine	regex/types.html#flagMultiLine	Flag.flagMultiLine		29
nim	flagNotMultiLine	regex/types.html#flagNotMultiLine	Flag.flagNotMultiLine		29
nim	flagAnyMatchNewLine	regex/types.html#flagAnyMatchNewLine	Flag.flagAnyMatchNewLine		29
nim	flagNotAnyMatchNewLine	regex/types.html#flagNotAnyMatchNewLine	Flag.flagNotAnyMatchNewLine		29
nim	flagUnGreedy	regex/types.html#flagUnGreedy	Flag.flagUnGreedy		29
nim	flagNotUnGreedy	regex/types.html#flagNotUnGreedy	Flag.flagNotUnGreedy		29
nim	flagUnicode	regex/types.html#flagUnicode	Flag.flagUnicode		29
nim	flagNotUnicode	regex/types.html#flagNotUnicode	Flag.flagNotUnicode		29
nim	flagVerbose	regex/types.html#flagVerbose	Flag.flagVerbose		29
nim	flagNotVerbose	regex/types.html#flagNotVerbose	Flag.flagNotVerbose		29
nim	Flag	regex/types.html#Flag	enum Flag		29
nim	reChar	regex/types.html#reChar	NodeKind.reChar		42
nim	reCharCi	regex/types.html#reCharCi	NodeKind.reCharCi		42
nim	reJoiner	regex/types.html#reJoiner	NodeKind.reJoiner		42
nim	reGroupStart	regex/types.html#reGroupStart	NodeKind.reGroupStart		42
nim	reGroupEnd	regex/types.html#reGroupEnd	NodeKind.reGroupEnd		42
nim	reFlags	regex/types.html#reFlags	NodeKind.reFlags		42
nim	reOr	regex/types.html#reOr	NodeKind.reOr		42
nim	reZeroOrMore	regex/types.html#reZeroOrMore	NodeKind.reZeroOrMore		42
nim	reOneOrMore	regex/types.html#reOneOrMore	NodeKind.reOneOrMore		42
nim	reZeroOrOne	regex/types.html#reZeroOrOne	NodeKind.reZeroOrOne		42
nim	reRepRange	regex/types.html#reRepRange	NodeKind.reRepRange		42
nim	reStartSym	regex/types.html#reStartSym	NodeKind.reStartSym		42
nim	reEndSym	regex/types.html#reEndSym	NodeKind.reEndSym		42
nim	reStartSymML	regex/types.html#reStartSymML	NodeKind.reStartSymML		42
nim	reEndSymML	regex/types.html#reEndSymML	NodeKind.reEndSymML		42
nim	reStart	regex/types.html#reStart	NodeKind.reStart		42
nim	reEnd	regex/types.html#reEnd	NodeKind.reEnd		42
nim	reWordBoundary	regex/types.html#reWordBoundary	NodeKind.reWordBoundary		42
nim	reNotWordBoundary	regex/types.html#reNotWordBoundary	NodeKind.reNotWordBoundary		42
nim	reWord	regex/types.html#reWord	NodeKind.reWord		42
nim	reDigit	regex/types.html#reDigit	NodeKind.reDigit		42
nim	reWhiteSpace	regex/types.html#reWhiteSpace	NodeKind.reWhiteSpace		42
nim	reUCC	regex/types.html#reUCC	NodeKind.reUCC		42
nim	reNotAlphaNum	regex/types.html#reNotAlphaNum	NodeKind.reNotAlphaNum		42
nim	reNotDigit	regex/types.html#reNotDigit	NodeKind.reNotDigit		42
nim	reNotWhiteSpace	regex/types.html#reNotWhiteSpace	NodeKind.reNotWhiteSpace		42
nim	reNotUCC	regex/types.html#reNotUCC	NodeKind.reNotUCC		42
nim	reAny	regex/types.html#reAny	NodeKind.reAny		42
nim	reAnyNl	regex/types.html#reAnyNl	NodeKind.reAnyNl		42
nim	reWordBoundaryAscii	regex/types.html#reWordBoundaryAscii	NodeKind.reWordBoundaryAscii		42
nim	reNotWordBoundaryAscii	regex/types.html#reNotWordBoundaryAscii	NodeKind.reNotWordBoundaryAscii		42
nim	reWordAscii	regex/types.html#reWordAscii	NodeKind.reWordAscii		42
nim	reDigitAscii	regex/types.html#reDigitAscii	NodeKind.reDigitAscii		42
nim	reWhiteSpaceAscii	regex/types.html#reWhiteSpaceAscii	NodeKind.reWhiteSpaceAscii		42
nim	reNotAlphaNumAscii	regex/types.html#reNotAlphaNumAscii	NodeKind.reNotAlphaNumAscii		42
nim	reNotDigitAscii	regex/types.html#reNotDigitAscii	NodeKind.reNotDigitAscii		42
nim	reNotWhiteSpaceAscii	regex/types.html#reNotWhiteSpaceAscii	NodeKind.reNotWhiteSpaceAscii		42
nim	reAnyAscii	regex/types.html#reAnyAscii	NodeKind.reAnyAscii		42
nim	reAnyNlAscii	regex/types.html#reAnyNlAscii	NodeKind.reAnyNlAscii		42
nim	reInSet	regex/types.html#reInSet	NodeKind.reInSet		42
nim	reNotSet	regex/types.html#reNotSet	NodeKind.reNotSet		42
nim	reLookahead	regex/types.html#reLookahead	NodeKind.reLookahead		42
nim	reLookbehind	regex/types.html#reLookbehind	NodeKind.reLookbehind		42
nim	reNotLookahead	regex/types.html#reNotLookahead	NodeKind.reNotLookahead		42
nim	reNotLookbehind	regex/types.html#reNotLookbehind	NodeKind.reNotLookbehind		42
nim	reSkip	regex/types.html#reSkip	NodeKind.reSkip		42
nim	reEoe	regex/types.html#reEoe	NodeKind.reEoe		42
nim	NodeKind	regex/types.html#NodeKind	enum NodeKind		42
nim	NodeUid	regex/types.html#NodeUid	type NodeUid		90
nim	Node	regex/types.html#Node	object Node		91
nim	SubExp	regex/types.html#SubExp	object SubExp		113
nim	toCharNode	regex/types.html#toCharNode,Rune	proc toCharNode(r: Rune): Node		118
nim	initJoinerNode	regex/types.html#initJoinerNode	proc initJoinerNode(): Node		123
nim	initEoeNode	regex/types.html#initEoeNode	proc initEoeNode(): Node		130
nim	initSetNode	regex/types.html#initSetNode	proc initSetNode(): Node		145
nim	initNotSetNode	regex/types.html#initNotSetNode	proc initNotSetNode(): Node		150
nim	initGroupStart	regex/types.html#initGroupStart,string,seq[Flag]	proc initGroupStart(name: string = ""; flags: seq[Flag] = @[]; isCapturing = true): Node		155
nim	initSkipNode	regex/types.html#initSkipNode	proc initSkipNode(): Node		168
nim	initSkipNode	regex/types.html#initSkipNode,openArray[int16]	proc initSkipNode(next: openArray[int16]): Node		173
nim	isEmpty	regex/types.html#isEmpty,Node	proc isEmpty(n: Node): bool		180
nim	opKind	regex/types.html#opKind	const opKind		189
nim	assertionKind	regex/types.html#assertionKind	const assertionKind		196
nim	lookaroundKind	regex/types.html#lookaroundKind	const lookaroundKind		211
nim	lookaheadKind	regex/types.html#lookaheadKind	const lookaheadKind		216
nim	lookbehindKind	regex/types.html#lookbehindKind	const lookbehindKind		219
nim	shorthandKind	regex/types.html#shorthandKind	const shorthandKind		222
nim	matchableKind	regex/types.html#matchableKind	const matchableKind		237
nim	repetitionKind	regex/types.html#repetitionKind	const repetitionKind		260
nim	groupKind	regex/types.html#groupKind	const groupKind		264
nim	groupStartKind	regex/types.html#groupStartKind	const groupStartKind		267
nim	isEpsilonTransition	regex/types.html#isEpsilonTransition,Node	proc isEpsilonTransition(n: Node): bool		269
nim	`$`	regex/types.html#$,Node	proc `$`(n: Node): string		276
nim	toString	regex/types.html#toString,seq[Node]	proc toString(n: seq[Node]): string		333
nimgrp	initskipnode	regex/types.html#initSkipNode-procs-all	proc		168
